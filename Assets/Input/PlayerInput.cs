//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""SnakeInput"",
            ""id"": ""009a4331-e292-4113-a482-7b34c0614b6f"",
            ""actions"": [
                {
                    ""name"": ""HorizontalAxis"",
                    ""type"": ""Value"",
                    ""id"": ""ccb53708-c2da-42b2-89a9-a8995aadd8ab"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""7175133d-cff6-4306-9327-c89c904b2f51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""db9e52a3-b455-4287-9238-f68cb7ffa5d7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8d147884-a375-44c4-8282-e9d95d3cd595"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bd6e72d3-9b70-440a-af2d-d80c8302a7ad"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""79e2767d-7b02-42b6-8aca-08876614042c"",
                    ""path"": ""*/{Back}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SnakeInput
        m_SnakeInput = asset.FindActionMap("SnakeInput", throwIfNotFound: true);
        m_SnakeInput_HorizontalAxis = m_SnakeInput.FindAction("HorizontalAxis", throwIfNotFound: true);
        m_SnakeInput_Escape = m_SnakeInput.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SnakeInput
    private readonly InputActionMap m_SnakeInput;
    private ISnakeInputActions m_SnakeInputActionsCallbackInterface;
    private readonly InputAction m_SnakeInput_HorizontalAxis;
    private readonly InputAction m_SnakeInput_Escape;
    public struct SnakeInputActions
    {
        private @PlayerInput m_Wrapper;
        public SnakeInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalAxis => m_Wrapper.m_SnakeInput_HorizontalAxis;
        public InputAction @Escape => m_Wrapper.m_SnakeInput_Escape;
        public InputActionMap Get() { return m_Wrapper.m_SnakeInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SnakeInputActions set) { return set.Get(); }
        public void SetCallbacks(ISnakeInputActions instance)
        {
            if (m_Wrapper.m_SnakeInputActionsCallbackInterface != null)
            {
                @HorizontalAxis.started -= m_Wrapper.m_SnakeInputActionsCallbackInterface.OnHorizontalAxis;
                @HorizontalAxis.performed -= m_Wrapper.m_SnakeInputActionsCallbackInterface.OnHorizontalAxis;
                @HorizontalAxis.canceled -= m_Wrapper.m_SnakeInputActionsCallbackInterface.OnHorizontalAxis;
                @Escape.started -= m_Wrapper.m_SnakeInputActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_SnakeInputActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_SnakeInputActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_SnakeInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorizontalAxis.started += instance.OnHorizontalAxis;
                @HorizontalAxis.performed += instance.OnHorizontalAxis;
                @HorizontalAxis.canceled += instance.OnHorizontalAxis;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public SnakeInputActions @SnakeInput => new SnakeInputActions(this);
    public interface ISnakeInputActions
    {
        void OnHorizontalAxis(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
